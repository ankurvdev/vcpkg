diff --git a/CMakeLists.txt b/CMakeLists.txt
index 7b8bc7c..fa6da32 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -432,7 +432,7 @@
       NAMES uv libuv
       HINTS $ENV{CONDA_PREFIX}\\Library $ENV{PREFIX}\\Library
       PATH_SUFFIXES lib
-      NO_DEFAULT_PATH)
+    )
     if(NOT libuv_tmp_LIBRARY)
       set(USE_DISTRIBUTED OFF)
       set(USE_GLOO OFF)
@@ -1295,10 +1295,6 @@
     DESTINATION share/cmake/Caffe2/
     COMPONENT dev)
   install(
-    FILES ${PROJECT_SOURCE_DIR}/cmake/Modules/FindCUDAToolkit.cmake
-    DESTINATION share/cmake/Caffe2/
-    COMPONENT dev)
-  install(
     FILES ${PROJECT_SOURCE_DIR}/cmake/Modules/FindCUSPARSELT.cmake
     DESTINATION share/cmake/Caffe2/
     COMPONENT dev)
diff --git a/aten/src/ATen/native/vulkan/api/Allocator.h b/aten/src/ATen/native/vulkan/api/Allocator.h
index d0c8bdf..50df97a 100644
--- a/aten/src/ATen/native/vulkan/api/Allocator.h
+++ b/aten/src/ATen/native/vulkan/api/Allocator.h
@@ -47,7 +47,7 @@
 #pragma clang diagnostic ignored "-Winconsistent-missing-destructor-override"
 #endif /* __clang__ */
 
-#include <include/vk_mem_alloc.h>
+#include <vk_mem_alloc.h>
 
 #ifdef __clang__
 #pragma clang diagnostic pop
diff --git a/aten/src/ATen/native/vulkan/ops/Clamp.cpp b/aten/src/ATen/native/vulkan/ops/Clamp.cpp
index dc22b98..f91fbf6 100644
--- a/aten/src/ATen/native/vulkan/ops/Clamp.cpp
+++ b/aten/src/ATen/native/vulkan/ops/Clamp.cpp
@@ -1,3 +1,6 @@
+#define _USE_MATH_DEFINES 
+#include <cmath>
+
 #include <ATen/native/vulkan/ops/Common.h>
 #include <torch/library.h>
 
diff --git a/c10/CMakeLists.txt b/c10/CMakeLists.txt
index ad407e1..bbca41b 100644
--- a/c10/CMakeLists.txt
+++ b/c10/CMakeLists.txt
@@ -161,7 +161,11 @@
   # Note: for now, we will put all export path into one single Caffe2Targets group
   # to deal with the cmake deployment need. Inside the Caffe2Targets set, the
   # individual libraries like libc10.so and libcaffe2.so are still self-contained.
-  install(TARGETS c10 EXPORT Caffe2Targets DESTINATION lib)
+  install(TARGETS c10 EXPORT Caffe2Targets
+          RUNTIME DESTINATION bin
+          ARCHIVE DESTINATION lib
+          ARCHIVE DESTINATION lib
+          )
 endif()
 
 install(DIRECTORY ${CMAKE_CURRENT_LIST_DIR}
diff --git a/caffe2/CMakeLists.txt b/caffe2/CMakeLists.txt
index 74d0d55..cf349c2 100644
--- a/caffe2/CMakeLists.txt
+++ b/caffe2/CMakeLists.txt
@@ -549,7 +549,11 @@
   endif()
 
   target_link_libraries(caffe2_nvrtc PRIVATE caffe2::nvrtc ${DELAY_LOAD_FLAGS})
-  install(TARGETS caffe2_nvrtc DESTINATION "${TORCH_INSTALL_LIB_DIR}")
+  install(TARGETS caffe2_nvrtc 
+      RUNTIME DESTINATION "${TORCH_INSTALL_BIN_DIR}"
+      LIBRARY DESTINATION "${TORCH_INSTALL_LIB_DIR}"
+      ARCHIVE DESTINATION "${TORCH_INSTALL_LIB_DIR}"
+    )
   if(USE_NCCL)
     list(APPEND Caffe2_GPU_SRCS
       ${TORCH_SRC_DIR}/csrc/cuda/nccl.cpp)
@@ -609,7 +613,11 @@
   target_link_libraries(caffe2_nvrtc ${PYTORCH_HIP_LIBRARIES} ${ROCM_HIPRTC_LIB})
   target_include_directories(caffe2_nvrtc PRIVATE ${CMAKE_BINARY_DIR})
   target_compile_definitions(caffe2_nvrtc PRIVATE USE_ROCM __HIP_PLATFORM_AMD__)
-  install(TARGETS caffe2_nvrtc DESTINATION "${TORCH_INSTALL_LIB_DIR}")
+  install(TARGETS caffe2_nvrtc
+      RUNTIME DESTINATION "${TORCH_INSTALL_BIN_DIR}"
+      LIBRARY DESTINATION "${TORCH_INSTALL_LIB_DIR}"
+      ARCHIVE DESTINATION "${TORCH_INSTALL_LIB_DIR}"
+    )
 endif()
 
 if(NOT NO_API AND NOT BUILD_LITE_INTERPRETER)
@@ -995,8 +1003,12 @@
           CUDA::culibos ${CMAKE_DL_LIBS})
     endif()
     set_source_files_properties(${CMAKE_CURRENT_SOURCE_DIR}/../aten/src/ATen/native/cuda/LinearAlgebraStubs.cpp PROPERTIES COMPILE_FLAGS "-DBUILD_LAZY_CUDA_LINALG")
-    install(TARGETS torch_cuda_linalg DESTINATION "${TORCH_INSTALL_LIB_DIR}")
-  endif()
+    install(TARGETS torch_cuda_linalg
+          RUNTIME DESTINATION "${TORCH_INSTALL_BIN_DIR}"
+          LIBRARY DESTINATION "${TORCH_INSTALL_LIB_DIR}"
+          ARCHIVE DESTINATION "${TORCH_INSTALL_LIB_DIR}"
+        )
+    endif()
 
   if(USE_PRECOMPILED_HEADERS)
     target_precompile_headers(torch_cuda PRIVATE
@@ -1467,18 +1479,30 @@
 
 caffe2_interface_library(torch torch_library)
 
-install(TARGETS torch_cpu torch_cpu_library EXPORT Caffe2Targets DESTINATION "${TORCH_INSTALL_LIB_DIR}")
+install(TARGETS torch_cpu torch_cpu_library EXPORT Caffe2Targets
+      RUNTIME DESTINATION "${TORCH_INSTALL_BIN_DIR}"
+      LIBRARY DESTINATION "${TORCH_INSTALL_LIB_DIR}"
+      ARCHIVE DESTINATION "${TORCH_INSTALL_LIB_DIR}")

 if(USE_CUDA)
-  install(TARGETS torch_cuda torch_cuda_library EXPORT Caffe2Targets DESTINATION "${TORCH_INSTALL_LIB_DIR}")
+  install(TARGETS torch_cuda torch_cuda_library EXPORT Caffe2Targets
+      RUNTIME DESTINATION "${TORCH_INSTALL_BIN_DIR}"
+      LIBRARY DESTINATION "${TORCH_INSTALL_LIB_DIR}"
+      ARCHIVE DESTINATION "${TORCH_INSTALL_LIB_DIR}")
 elseif(USE_ROCM)
-  install(TARGETS torch_hip torch_hip_library EXPORT Caffe2Targets DESTINATION "${TORCH_INSTALL_LIB_DIR}")
+  install(TARGETS torch_hip torch_hip_library EXPORT Caffe2Targets
+      RUNTIME DESTINATION "${TORCH_INSTALL_BIN_DIR}"
+      LIBRARY DESTINATION "${TORCH_INSTALL_LIB_DIR}"
+      ARCHIVE DESTINATION "${TORCH_INSTALL_LIB_DIR}")
 elseif(USE_XPU)
   install(TARGETS torch_xpu torch_xpu_library EXPORT Caffe2Targets DESTINATION "${TORCH_INSTALL_LIB_DIR}")
 endif()
 
-install(TARGETS torch torch_library EXPORT Caffe2Targets DESTINATION "${TORCH_INSTALL_LIB_DIR}")
-
+install(TARGETS torch torch_library EXPORT Caffe2Targets
+      RUNTIME DESTINATION "${TORCH_INSTALL_BIN_DIR}"
+      LIBRARY DESTINATION "${TORCH_INSTALL_LIB_DIR}"
+      ARCHIVE DESTINATION "${TORCH_INSTALL_LIB_DIR}")
+ 
 target_link_libraries(torch PUBLIC torch_cpu_library)
 
 if(USE_CUDA)
@@ -1498,11 +1522,11 @@
 
 # Install PDB files for MSVC builds
 if(MSVC AND BUILD_SHARED_LIBS)
-  install(FILES $<TARGET_PDB_FILE:torch_cpu> DESTINATION "${TORCH_INSTALL_LIB_DIR}" OPTIONAL)
+  install(FILES $<TARGET_PDB_FILE:torch_cpu> DESTINATION "${TORCH_INSTALL_BIN_DIR}" OPTIONAL)
   if(USE_CUDA)
-    install(FILES $<TARGET_PDB_FILE:torch_cuda> DESTINATION "${TORCH_INSTALL_LIB_DIR}" OPTIONAL)
+    install(FILES $<TARGET_PDB_FILE:torch_cuda> DESTINATION "${TORCH_INSTALL_BIN_DIR}" OPTIONAL)
   elseif(USE_ROCM)
-    install(FILES $<TARGET_PDB_FILE:torch_hip> DESTINATION "${TORCH_INSTALL_LIB_DIR}" OPTIONAL)
+    install(FILES $<TARGET_PDB_FILE:torch_hip> DESTINATION "${TORCH_INSTALL_BIN_DIR}" OPTIONAL)
   endif()
 endif()
 
@@ -1616,7 +1640,10 @@
       target_link_libraries(torch_global_deps torch::nvtoolsext)
     endif()
   endif()
-  install(TARGETS torch_global_deps DESTINATION "${TORCH_INSTALL_LIB_DIR}")
+  install(TARGETS torch_global_deps
+        RUNTIME DESTINATION "${TORCH_INSTALL_BIN_DIR}"
+        LIBRARY DESTINATION "${TORCH_INSTALL_LIB_DIR}"
+        ARCHIVE DESTINATION "${TORCH_INSTALL_LIB_DIR}")
 endif()
 
 # ---[ Caffe2 HIP sources.
diff --git a/cmake/Modules/FindCUSPARSELT.cmake b/cmake/Modules/FindCUSPARSELT.cmake
index 8727f44..1e41281 100644
--- a/cmake/Modules/FindCUSPARSELT.cmake
+++ b/cmake/Modules/FindCUSPARSELT.cmake
@@ -24,7 +24,7 @@
 set(CUSPARSELT_INCLUDE_DIR $ENV{CUSPARSELT_INCLUDE_DIR} CACHE PATH "Folder containing NVIDIA cuSPARSELt header files")
 
 find_path(CUSPARSELT_INCLUDE_PATH cusparseLt.h
-  HINTS ${CUSPARSELT_INCLUDE_DIR}
+  HINTS ${CUSPARSELT_INCLUDE_DIR} ENV CUDA_PATH
   PATH_SUFFIXES cuda/include cuda include)
 
 set(CUSPARSELT_LIBRARY $ENV{CUSPARSELT_LIBRARY} CACHE PATH "Path to the cusparselt library file (e.g., libcusparseLt.so)")
@@ -35,7 +35,7 @@
 endif()
 
 find_library(CUSPARSELT_LIBRARY_PATH ${CUSPARSELT_LIBRARY_NAME}
-  PATHS ${CUSPARSELT_LIBRARY}
+  PATHS ${CUSPARSELT_LIBRARY} ENV CUDA_PATH
   PATH_SUFFIXES lib lib64 cuda/lib cuda/lib64 lib/x64)
 
 find_package_handle_standard_args(CUSPARSELT DEFAULT_MSG CUSPARSELT_LIBRARY_PATH CUSPARSELT_INCLUDE_PATH)
diff --git a/cmake/Modules/FindMAGMA.cmake b/cmake/Modules/FindMAGMA.cmake
index d2bff53..3af9012 100644
--- a/cmake/Modules/FindMAGMA.cmake
+++ b/cmake/Modules/FindMAGMA.cmake
@@ -30,18 +30,13 @@ FIND_PATH(MAGMA_INCLUDE_DIR magma.h
   HINTS $ENV{MAGMA_HOME} /usr/local/magma
   PATH_SUFFIXES include)
 
-IF (MAGMA_LIBRARIES)
-  SET(MAGMA_FOUND TRUE)
-ELSE (MAGMA_LIBRARIES)
-  SET(MAGMA_FOUND FALSE)
-ENDIF (MAGMA_LIBRARIES)
-
-add_library(torch::magma INTERFACE IMPORTED)
-set_property(TARGET torch::magma
-             PROPERTY INTERFACE_INCLUDE_DIRECTORIES "${MAGMA_INCLUDE_DIR}")
-set_property(TARGET torch::magma
-             PROPERTY INTERFACE_LINK_LIBRARIES "${MAGMA_LIBRARIES}")
-
+if(NOT TARGET torch::magma)
+  add_library(torch::magma INTERFACE IMPORTED)
+  set_property(TARGET torch::magma
+               PROPERTY INTERFACE_INCLUDE_DIRECTORIES "${MAGMA_INCLUDE_DIR}")
+  set_property(TARGET torch::magma
+               PROPERTY INTERFACE_LINK_LIBRARIES "${MAGMA_LIBRARIES}")
+endif()
 # Check for Magma V2
 include(CheckPrototypeDefinition)
 check_prototype_definition(magma_get_sgeqrf_nb
@@ -53,3 +48,5 @@ if(MAGMA_V2)
   set_property(TARGET torch::magma
                PROPERTY INTERFACE_COMPILE_DEFINITIONS "MAGMA_V2")
 endif(MAGMA_V2)
+
+find_package_handle_standard_args(MAGMA REQUIRED_VARS MAGMA_INCLUDE_DIR MAGMA_LIBRARIES)
\ No newline at end of file
diff --git a/test/cpp/jit/CMakeLists.txt b/test/cpp/jit/CMakeLists.txt
index 2376f1b..a8ae436 100644
--- a/test/cpp/jit/CMakeLists.txt
+++ b/test/cpp/jit/CMakeLists.txt
@@ -124,7 +124,7 @@ endif()
 set(JIT_TEST_DEPENDENCIES torch gtest jitbackend_test backend_with_compiler)
 
 if(MSVC)
-  list(APPEND JIT_TEST_DEPENDENCIES onnx_library)
+  list(APPEND JIT_TEST_DEPENDENCIES onnx)
 endif(MSVC)
 
 target_link_libraries(test_jit PRIVATE ${JIT_TEST_DEPENDENCIES})
diff --git a/torch/CMakeLists.txt b/torch/CMakeLists.txt
index 62ee4c1..f75073c 100644
--- a/torch/CMakeLists.txt
+++ b/torch/CMakeLists.txt
@@ -107,7 +107,7 @@ set(TORCH_PYTHON_LINK_FLAGS "")
 
 if(MSVC)
     string(APPEND TORCH_PYTHON_LINK_FLAGS " /NODEFAULTLIB:LIBCMT.LIB")
-    list(APPEND TORCH_PYTHON_LINK_LIBRARIES ${PYTHON_LIBRARIES} onnx_library)
+    list(APPEND TORCH_PYTHON_LINK_LIBRARIES ${PYTHON_LIBRARIES} onnx)
     if(NOT CMAKE_BUILD_TYPE MATCHES "Release")
       string(APPEND TORCH_PYTHON_LINK_FLAGS " /DEBUG:FULL")
     endif()
@@ -374,7 +374,10 @@ if(NOT TORCH_PYTHON_LINK_FLAGS STREQUAL "")
     set_target_properties(torch_python PROPERTIES LINK_FLAGS ${TORCH_PYTHON_LINK_FLAGS})
 endif()
 
-install(TARGETS torch_python DESTINATION "${TORCH_INSTALL_LIB_DIR}")
+install(TARGETS torch_python       
+      RUNTIME DESTINATION "${TORCH_INSTALL_BIN_DIR}"
+      LIBRARY DESTINATION "${TORCH_INSTALL_LIB_DIR}"
+      ARCHIVE DESTINATION "${TORCH_INSTALL_LIB_DIR}")
 
 # Generate torch/version.py from the appropriate CMake cache variables.
 if(${CMAKE_BUILD_TYPE} STREQUAL "Debug")
diff --git a/torch/csrc/cuda/shared/nvtx.cpp b/torch/csrc/cuda/shared/nvtx.cpp
index 4fb72c5..1abe1b7 100644
--- a/torch/csrc/cuda/shared/nvtx.cpp
+++ b/torch/csrc/cuda/shared/nvtx.cpp
@@ -4,7 +4,7 @@
 #ifdef TORCH_CUDA_USE_NVTX3
 #include <nvtx3/nvtx3.hpp>
 #else
-#include <nvToolsExt.h>
+#include <nvtx3/nvToolsExt.h>
 #endif
 #include <torch/csrc/utils/pybind.h>
 
diff --git a/torch/csrc/jit/tensorexpr/llvm_codegen.h b/torch/csrc/jit/tensorexpr/llvm_codegen.h
index 7ab506f..2ee3b68 100644
--- a/torch/csrc/jit/tensorexpr/llvm_codegen.h
+++ b/torch/csrc/jit/tensorexpr/llvm_codegen.h
@@ -41,9 +41,9 @@ class TORCH_API LLVMCodeGen : public CodeGen {
   // users can continue to call this kernel using `call` and `call_raw`.
   void cleanup_memory();
 
-  TORCH_API void call(const std::vector<CallArg>& args) override;
-  TORCH_API void call_raw(const std::vector<void*>& args) override;
-  TORCH_API void call_with_numel(void** args, int64_t numel) override;
+  void call(const std::vector<CallArg>& args) override;
+  void call_raw(const std::vector<void*>& args) override;
+  void call_with_numel(void** args, int64_t numel) override;
 
   at::Tensor empty_strided(
       c10::IntArrayRef size,
diff --git a/torch/csrc/profiler/stubs/cuda.cpp b/torch/csrc/profiler/stubs/cuda.cpp
index dec8757..3bb368a 100644
--- a/torch/csrc/profiler/stubs/cuda.cpp
+++ b/torch/csrc/profiler/stubs/cuda.cpp
@@ -3,7 +3,7 @@
 #ifdef TORCH_CUDA_USE_NVTX3
 #include <nvtx3/nvtx3.hpp>
 #else
-#include <nvToolsExt.h>
+#include <nvtx3/nvToolsExt.h>
 #endif
 
 #include <c10/cuda/CUDAGuard.h>
